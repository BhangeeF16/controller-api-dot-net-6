// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.CandidateModule.CandidateEducationExperience", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstitueName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPresentExperience")
                        .HasColumnType("bit");

                    b.Property<int>("LevelOfEdujcation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("fk_CandidateProfileID")
                        .HasColumnType("int");

                    b.Property<int>("fk_SubjectID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_CandidateProfileID");

                    b.HasIndex("fk_SubjectID");

                    b.ToTable("CandidateEducationExperience");
                });

            modelBuilder.Entity("Domain.Entities.CandidateModule.CandidateJobExperience", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CorporateName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPresentExperience")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("fk_CandidateProfileID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_CandidateProfileID");

                    b.ToTable("CandidateJobExperience");
                });

            modelBuilder.Entity("Domain.Entities.CandidateModule.CandidateResumeUploadDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ResumeFileKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fk_CandidateProfileID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_CandidateProfileID");

                    b.ToTable("CandidateResumeUploadDetail");
                });

            modelBuilder.Entity("Domain.Entities.CandidateModule.EducationSubject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("EducationSubject");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Subject = "Business"
                        },
                        new
                        {
                            ID = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Subject = "Computer Science"
                        },
                        new
                        {
                            ID = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Subject = "Medical"
                        },
                        new
                        {
                            ID = 4,
                            IsActive = true,
                            IsDeleted = false,
                            Subject = "Engineering"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CorporateModule.Corporate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HeadQuarterContact")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HeadQuarterName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Corporate");
                });

            modelBuilder.Entity("Domain.Entities.CorporateModule.CorporateJob", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("WorkPlaceType")
                        .HasColumnType("int");

                    b.Property<int>("fk_CorporateID")
                        .HasColumnType("int");

                    b.Property<int>("fk_JobPostedByProfileID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PostID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_CorporateID");

                    b.HasIndex("fk_JobPostedByProfileID");

                    b.HasIndex("fk_PostID");

                    b.ToTable("CorporateJob");
                });

            modelBuilder.Entity("Domain.Entities.CorporateModule.JobApplicant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("fk_CandidateProfileID")
                        .HasColumnType("int");

                    b.Property<int>("fk_CandidateResumeID")
                        .HasColumnType("int");

                    b.Property<int>("fk_CorporateJobID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_CandidateProfileID");

                    b.HasIndex("fk_CandidateResumeID");

                    b.HasIndex("fk_CorporateJobID");

                    b.ToTable("JobApplicant");
                });

            modelBuilder.Entity("Domain.Entities.GeneralModule.ApiCallLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndPoint")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsException")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccessfull")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ApiCallLog");
                });

            modelBuilder.Entity("Domain.Entities.GeneralModule.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AppSetting");
                });

            modelBuilder.Entity("Domain.Entities.GeneralModule.MiddlewareLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RequestAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestByURL")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequestURL")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MiddlewareLog");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("fk_CommentSettingID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PostTypeID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PostViewSettingID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_CommentSettingID");

                    b.HasIndex("fk_PostTypeID");

                    b.HasIndex("fk_PostViewSettingID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("fk_PostID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_PostID");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostCommentSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PostCommentSetting");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "No one is allowed to comment",
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Turned Off"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Only I can comment on this post",
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Only Me"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Everyone can comment on this post",
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Default"
                        });
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileKey")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("fk_PostID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_PostID");

                    b.ToTable("PostFile");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostReaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("fk_PostID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PostReactionTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_PostID");

                    b.HasIndex("fk_PostReactionTypeID");

                    b.ToTable("PostReaction");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostReactionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("IconKey")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PostReactionType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Like"
                        },
                        new
                        {
                            ID = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Curious"
                        },
                        new
                        {
                            ID = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Helped"
                        },
                        new
                        {
                            ID = 4,
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Support"
                        });
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostShare", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("fk_PostID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_PostID");

                    b.ToTable("PostShare");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostTag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("fk_PostID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_PostID");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PostType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Ordinary"
                        },
                        new
                        {
                            ID = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Job"
                        },
                        new
                        {
                            ID = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Poll"
                        },
                        new
                        {
                            ID = 4,
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Celebration"
                        });
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostViewSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PostViewSetting");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Anyone can view this post",
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Anyone"
                        },
                        new
                        {
                            ID = 2,
                            Description = "No one can view this post",
                            IsActive = true,
                            IsDeleted = false,
                            Label = "Only Me"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CommunicationPreference")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Ethnicity")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnBoarded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChanged")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("fk_RoleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_RoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserCandidateProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FacecbookUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LinkedInUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("fk_UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_UserID")
                        .IsUnique();

                    b.ToTable("UserCandidateProfile");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserCorporateProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("fk_CorporateID")
                        .HasColumnType("int");

                    b.Property<int>("fk_UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_CorporateID");

                    b.HasIndex("fk_UserID")
                        .IsUnique();

                    b.ToTable("UserCorporateProfile");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("CanAddUser")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteUser")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditUser")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewUsers")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CanAddUser = true,
                            CanDeleteUser = true,
                            CanEditUser = true,
                            CanViewUsers = true,
                            IsActive = true,
                            IsDeleted = false,
                            RoleName = "Application Admin"
                        },
                        new
                        {
                            ID = 2,
                            CanAddUser = false,
                            CanDeleteUser = false,
                            CanEditUser = false,
                            CanViewUsers = true,
                            IsActive = true,
                            IsDeleted = false,
                            RoleName = "CorporateUser"
                        },
                        new
                        {
                            ID = 3,
                            CanAddUser = false,
                            CanDeleteUser = false,
                            CanEditUser = false,
                            CanViewUsers = true,
                            IsActive = true,
                            IsDeleted = false,
                            RoleName = "CandidateUser"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserShippingAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TownCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fk_UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("UserShippingAddress");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserStripeDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("ConnectedAccountID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("fk_UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("UserStripeDetail");
                });

            modelBuilder.Entity("Domain.Entities.CandidateModule.CandidateEducationExperience", b =>
                {
                    b.HasOne("Domain.Entities.UsersModule.UserCandidateProfile", "CandidateProfile")
                        .WithMany("EducationExperiences")
                        .HasForeignKey("fk_CandidateProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CandidateModule.EducationSubject", "EducationSubject")
                        .WithMany("EducationExperiences")
                        .HasForeignKey("fk_SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");

                    b.Navigation("EducationSubject");
                });

            modelBuilder.Entity("Domain.Entities.CandidateModule.CandidateJobExperience", b =>
                {
                    b.HasOne("Domain.Entities.UsersModule.UserCandidateProfile", "CandidateProfile")
                        .WithMany("JobExperiences")
                        .HasForeignKey("fk_CandidateProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Domain.Entities.CandidateModule.CandidateResumeUploadDetail", b =>
                {
                    b.HasOne("Domain.Entities.UsersModule.UserCandidateProfile", "CandidateProfile")
                        .WithMany("CandidateResumeUploadDetails")
                        .HasForeignKey("fk_CandidateProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Domain.Entities.CorporateModule.CorporateJob", b =>
                {
                    b.HasOne("Domain.Entities.CorporateModule.Corporate", "Corporate")
                        .WithMany("PostedJobs")
                        .HasForeignKey("fk_CorporateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UsersModule.UserCorporateProfile", "JobPostedByProfile")
                        .WithMany("PostedJobs")
                        .HasForeignKey("fk_JobPostedByProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PostModule.Post", "Post")
                        .WithMany()
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");

                    b.Navigation("JobPostedByProfile");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.CorporateModule.JobApplicant", b =>
                {
                    b.HasOne("Domain.Entities.UsersModule.UserCandidateProfile", "CandidateProfile")
                        .WithMany("JobApplications")
                        .HasForeignKey("fk_CandidateProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CandidateModule.CandidateResumeUploadDetail", "CandidateResume")
                        .WithMany("Applications")
                        .HasForeignKey("fk_CandidateResumeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CorporateModule.CorporateJob", "CorporateJob")
                        .WithMany("Applicants")
                        .HasForeignKey("fk_CorporateJobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");

                    b.Navigation("CandidateResume");

                    b.Navigation("CorporateJob");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.Post", b =>
                {
                    b.HasOne("Domain.Entities.PostModule.PostCommentSetting", "CommentSetting")
                        .WithMany()
                        .HasForeignKey("fk_CommentSettingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PostModule.PostType", "PostType")
                        .WithMany()
                        .HasForeignKey("fk_PostTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PostModule.PostViewSetting", "PostViewSetting")
                        .WithMany()
                        .HasForeignKey("fk_PostViewSettingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentSetting");

                    b.Navigation("PostType");

                    b.Navigation("PostViewSetting");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostComment", b =>
                {
                    b.HasOne("Domain.Entities.PostModule.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostFile", b =>
                {
                    b.HasOne("Domain.Entities.PostModule.Post", "Post")
                        .WithMany("Files")
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostReaction", b =>
                {
                    b.HasOne("Domain.Entities.PostModule.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PostModule.PostReactionType", "PostReactionType")
                        .WithMany()
                        .HasForeignKey("fk_PostReactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("PostReactionType");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostShare", b =>
                {
                    b.HasOne("Domain.Entities.PostModule.Post", "Post")
                        .WithMany("Shares")
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.PostTag", b =>
                {
                    b.HasOne("Domain.Entities.PostModule.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("fk_PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.User", b =>
                {
                    b.HasOne("Domain.Entities.UsersModule.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("fk_RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserCandidateProfile", b =>
                {
                    b.HasOne("Domain.Entities.UsersModule.User", "User")
                        .WithOne("CandidateProfile")
                        .HasForeignKey("Domain.Entities.UsersModule.UserCandidateProfile", "fk_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserCorporateProfile", b =>
                {
                    b.HasOne("Domain.Entities.CorporateModule.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("fk_CorporateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UsersModule.User", "User")
                        .WithOne("CorporateProfile")
                        .HasForeignKey("Domain.Entities.UsersModule.UserCorporateProfile", "fk_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserShippingAddress", b =>
                {
                    b.HasOne("Domain.Entities.UsersModule.User", "User")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserStripeDetail", b =>
                {
                    b.HasOne("Domain.Entities.UsersModule.User", "User")
                        .WithMany("StripeDetails")
                        .HasForeignKey("fk_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CandidateModule.CandidateResumeUploadDetail", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.CandidateModule.EducationSubject", b =>
                {
                    b.Navigation("EducationExperiences");
                });

            modelBuilder.Entity("Domain.Entities.CorporateModule.Corporate", b =>
                {
                    b.Navigation("PostedJobs");
                });

            modelBuilder.Entity("Domain.Entities.CorporateModule.CorporateJob", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("Domain.Entities.PostModule.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");

                    b.Navigation("Reactions");

                    b.Navigation("Shares");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.User", b =>
                {
                    b.Navigation("CandidateProfile");

                    b.Navigation("CorporateProfile");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("StripeDetails");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserCandidateProfile", b =>
                {
                    b.Navigation("CandidateResumeUploadDetails");

                    b.Navigation("EducationExperiences");

                    b.Navigation("JobApplications");

                    b.Navigation("JobExperiences");
                });

            modelBuilder.Entity("Domain.Entities.UsersModule.UserCorporateProfile", b =>
                {
                    b.Navigation("PostedJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
